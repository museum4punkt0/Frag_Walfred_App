import {
  require_toFinite
} from "./chunk-Y3Z4GLWP.js";
import "./chunk-B7MWOT3W.js";
import {
  require_eq
} from "./chunk-XLXFT3WO.js";
import {
  require_isArrayLike,
  require_isIndex,
  require_isObject
} from "./chunk-OUASEPQW.js";
import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/lodash/_baseRandom.js
var require_baseRandom = __commonJS({
  "node_modules/lodash/_baseRandom.js"(exports, module) {
    var nativeFloor = Math.floor;
    var nativeRandom = Math.random;
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }
    module.exports = baseRandom;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/random.js
var require_random = __commonJS({
  "node_modules/lodash/random.js"(exports, module) {
    var baseRandom = require_baseRandom();
    var isIterateeCall = require_isIterateeCall();
    var toFinite = require_toFinite();
    var freeParseFloat = parseFloat;
    var nativeMin = Math.min;
    var nativeRandom = Math.random;
    function random(lower, upper, floating) {
      if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
        upper = floating = void 0;
      }
      if (floating === void 0) {
        if (typeof upper == "boolean") {
          floating = upper;
          upper = void 0;
        } else if (typeof lower == "boolean") {
          floating = lower;
          lower = void 0;
        }
      }
      if (lower === void 0 && upper === void 0) {
        lower = 0;
        upper = 1;
      } else {
        lower = toFinite(lower);
        if (upper === void 0) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
      }
      return baseRandom(lower, upper);
    }
    module.exports = random;
  }
});

// dep:lodash_random
var lodash_random_default = require_random();
export {
  lodash_random_default as default
};
//# sourceMappingURL=lodash_random.js.map
